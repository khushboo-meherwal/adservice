# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

name : Docker-CI
trigger:
  branches:
    include:
      - master
 
pool:
  vmImage: 'ubuntu-latest'
 
variables:
  ImageName: '173129/adservice:$(Build.BuildId)'
 
stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build and push Docker image
    steps:
    - task: Docker@1
      displayName: 'Build the Docker image'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Build an image'
        dockerFile: '**/Dockerfile'
        imageName: '$(ImageName)'
        includeLatestTag: true
        useDefaultContext: false
        buildContext: '.'
        addBaseImageData: 
        addDefaultLabels: 
    - task: Docker@1
      inputs:
      SonarQube: '<sonarqube connection from dropdown>'
      scannerMode: 'MSBuild'
      projectKey: '<your project key>'
      projectName: '<your project name>'
      projectVersion: '<optional>'
    - task: MSBuild@1
      inputs:
      solution: '<.sln/.csproj file that you want to build>'
    - task: VSTest@2
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*test*.dll
          !**\*TestAdapter.dll
          !**\obj\**
        searchFolder: '$(System.DefaultWorkingDirectory)'
        codeCoverageEnabled: true
     
    - task: SonarQubeAnalyze@4
    
    - task: Docker@1
      inputs:
      pollingTimeoutSec: '300'    
- task: SonarQubePrepare@4
  inputs:
    SonarQube: 'sonarqube'
    scannerMode: 'MSBuild'
    projectKey: 'sonar.projectKey'
     
    - task: Docker@1
      displayName: 'Push the Docker image to Dockerhub'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Push an image'
        imageName: '$(ImageName)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))