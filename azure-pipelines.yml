# Docker



# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

name : Docker-CI
trigger:
  branches:
    include:
      - master

 
pool:
  vmImage: 'ubuntu-latest'
 
variables:
  ImageName: '173129/adservice:$(Build.BuildId)'
 
stages:
- stage: Sonar
  jobs:
  - job: Sonar
    steps:
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'sonarqube'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'adservice'
        cliProjectName: 'adservice'
        cliSources: 'src/main'
   # - task: SonarQubeAnalyze@4
     # displayName: 'Run SonarQube Scan'

    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'
    

      
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build and push Docker image
    steps:
    - task: Docker@1
      displayName: 'Build the Docker image'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Build an image'
        dockerFile: '**/Dockerfile'
        imageName: '$(ImageName)'
        includeLatestTag: true
        useDefaultContext: false
        buildContext: '.'
        addBaseImageData: 
        addDefaultLabels: 
 
    - task: Docker@1
      displayName: 'Push the Docker image to Dockerhub'
      inputs:
        containerregistrytype: 'Container Registry'

        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Push an image'
        imageName: '$(ImageName)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  
    - task: HelmInstaller@1
      displayName: 'install helm'
      inputs:
        helmVersionToInstall: $(helmVersion)
    - bash: |
        cd $(projectName)
        helm package \
            --version $(helmChartVersion) \
            --app-version $(imageTag) \
            charts/$(projectName)
      failOnStderr: true
      displayName: 'helm package'
    - bash: |
        cd $(projectName)
        chartPackage=$(ls $(projectName)-$(helmChartVersion).tgz)
        az acr helm push \
            -n $(registryName) \
            -u $(registryLogin) \
            -p '$(registryPassword)' \
            $chartPackage
        echo $(jq -n --arg version "$(helmChartVersion)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
      failOnStderr: true
      name: helmPush
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      displayName: 'az acr helm push'
    - publish: $(build.artifactStagingDirectory)
      artifact: build-artifact
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))